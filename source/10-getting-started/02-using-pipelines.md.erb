---
title: Using pipelines
---

As defined by <a href="http://jezhumble.net/">Jez Humble</a>, author of <a href="http://www.amazon.com/dp/0321601912?tag=contindelive-20">Continuous Delivery</a>, a Deployment Pipeline is:

> **At an abstract level, a deployment pipeline is an automated manifestation of your process for getting software from version control into the hands of your users.**

A pipeline consists of a sequence of stages. They are independent logical units of your deployment process, each of them should increase the confidence that your code is ready to be deployed.

Learn more about [pipelines](#pipeline).

# Why should I use them?

One of the advantages of splitting your build into stages is that you can arrange it to get a better feedback about your code. Ideally, early stages are faster and are more likely to identify any problem. Subsequent ones may run slower and broader analysis.

Knowing that there is a problem earlier in your pipeline will enable your team to react to it better.

# Splitting your build pipeline into stages

Say that you have one single stage running all your tests as the one bellow.

<%= retina_image 'screenshots/getting-started/pacto-basic-pipeline' %>

## Step 1: Separated commands

The first step that you need to do is have a way to run types of test in an independent way. Most of the build tools already provide an easy way to do it. You can have for example, different rake commands for unit and functional tests.

While we are just running `rake` to run all tests in the stage, other commands are available as well: `unit`, `code_style_analysis`, `integration` and `samples`.

We'll begin by replacing `rake` with them:

<%= retina_image 'screenshots/getting-started/pacto-multiple-commands' %>

The build should still run with no problems.

## Step 2: Adding new stages

Now we can add different stages for each command. It's important to keep in mind that each stage starts in a new environment independent of the previous one.

Always starting from a clean state implies that any command that setup the environment to run the tests (eg: download dependencies, run data migrations, start services) need to be repeated for each stage. In this case, we need to repeat both `bundle install --path ${SNAP_CACHE_DIR}/.bundle` and `bundle exec foreman start &`.

We provide mechanisms like <%= topic_link 'caching', 'caching' %> and <%= topic_link 'Deployment Pipeline#setup-commands', 'pinned commands' %> that will come in hand to speed up downloads and easily share commands among stages.

<%= retina_image 'screenshots/getting-started/pacto-multiple-stages' %>

## Step 3: Optimizing your pipeline

Having a pipeline is about having meaningful feedback on your code as fast as possible.

<%= retina_image 'screenshots/getting-started/pacto-first-pipeline' %>

In our pipeline, even though **code style analysis** stage is fast, it is not critical for the team. It would not need immediate action from the team to fix. On the other hand, **integration** and **samples** are likely to find and rise bugs that would need attention, they provide a better feedback than **code style analysis**.

In order to provide a better feedback, we'll make **code style analysis** the last stage, making **integration** and **samples** run earlier.

<%= retina_image 'screenshots/getting-started/pacto-multiple-stages-final' %>

## That's it!

You have successfully finished your build pipeline!

If you need any help, please [contact us](<%= data.links.contact_us %>).



#What's next

<%= topic_link 'speeding up your build', 'Speeding up your build' %>

<%= topic_link 'deploying with snap', 'Where can I deploy using Snap?' %>

<%= topic_link 'debugging', 'My build is failing for unknown reasons, is there someway I can debug the build?' %>





