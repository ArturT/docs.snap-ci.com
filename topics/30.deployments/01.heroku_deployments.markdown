---
layout: topic
title:  "Heroku Deployments"
---

Snap provides two ways of doing deployments to Heroku, **Basic** and **Custom**.

If you choose to use the **Basic** deploy Snap will do all the work for you. We only need you to select which app is being deployed or give us a name if it is a new one. On the **Custom** deployment, you can write you own deploy tasks making full use of the [Heroku CLI](https://devcenter.heroku.com/categories/command-line).

# Credentials

We need you to provide us access to your apps in order to do the deploy. To do this, simply click on **Heroku Credentials**.

{% image screenshots/heroku/missing-credentials.png %}

You will be redirected to Heroku and after a sucessfull authentication your credentials will be available on Snap. Please notice that the same credentials can be used in any repository that you collaborate on.

> **Note:**
> For custom deployment you don't need to run `heroku login` before running any heroku commands as you have already authorised Snap.

# Configuration variables

You can optionally setup heroku configuration variables from Snap by navigating to the **Heroku Config Variables** tab when editing/creating a heroku deployment.

{% image screenshots/heroku/heroku-deployment-config-vars.png %}


<h2>
  Some Gotchas with heroku run
  <a class="anchor" href="#heroku-run-warning">
     <i class="icon icon-link"></i>
   </a>
</h2>

When using the `heroku run` subcommand, the exit status of the remote command is not returned. Which means that if your command fails in Heroku, the stage will not fail.
The workaround to capture the exit status is the following:

<code>buffer_file=/tmp/last_heroku_run; heroku run --app 'APP_NAME' 'YOUR_COMMAND; echo $?' | tee $buffer_file; exit &#x60;tail -1 $buffer_file&#96;</code>

You can read more about this issue [here](https://github.com/heroku/heroku/issues/186).
