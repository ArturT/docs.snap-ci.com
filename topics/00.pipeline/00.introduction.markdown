---
layout: topic
title:  "Introduction"
---

Snap differs from many of the other tools you may be familiar with in that it sets up a deployment pipeline. As defined by <a href="http://jezhumble.net/">Jez Humble</a>, author of <a href="http://www.amazon.com/dp/0321601912?tag=contindelive-20">Continuous Delivery</a>, a Deployment Pipeline is defined as follows:

> **At an abstract level, a deployment pipeline is an automated manifestation of your process for getting software from version control into the hands of your users.**

# Why do you need a Deployment Pipeline?

A deployment pipeline is a sequence of <a href="#stage">stages</a> which proceed from left to right. It is triggered by changes from a version control system. Each change propagates through the stages of the pipeline. Each stage provides higher level of confidence as code is deployed and tested in environments that are progressively more production like. Each stage may publish <a href="#artifact">artifacts</a> and the these artifacts can propagate through the pipeline for use by future stages.

{% image screenshots/pipelines-with-deployment.png %}

# Stage

> **Each stage consists of set of <a href="task">tasks</a> which are run to accomplish a specific purpose.**

Stages may also contain <a href="#environment-variable">environment variables</a> that may be required by the tasks. Stages may also generate <a href="#artifact">artifacts</a> which may be used by subsequent stages.

The stages can either be test stages each evaluating the build from a different perspective or deployment
stages which deploy your application to specific environments.

## Stages in Snap

Every stage in Snap runs in a **clean and isolated environment**. Any state that a stage sets up may not be available in subsequent stage. You must therefore consider using <a href="#artifact">artifacts</a>
or {% topic_link "Pinning Commands" "Setup Commands" %} to keep state across stages.

# Task

> **A task is a command run on the build machine.**

Every task in Snap runs in its own shell. Due to this, if you export an environment variable in a previous task, it may not be available in the subsequent tasks. We recommend using <a href="environment-variable">environment variables</a> for exporting environment variables to your builds.

# Environment Variable

You can define the environment variables required by your tasks in the environment variable section of the stage.

# Artifact

Artifacts are the outputs produced by a stage. These may include binary artifacts (jar, gem), console logs, test coverage reports etc.
Snap allows you to configure any directory as an artifact of a stage. This artifact will be made available to the next stage if there is one and will also be made available as a download to collaborators.

## Propagating artifacts

One of the advantages of a pipeline is that generated artifacts are not just available for download, but are also made available to subsequent stages. This allows you to build binaries only once, and increase confidence in the binary with each subsequent stage. This also gurantees that you are deploying the exact same binary to an environment that you tested with.
